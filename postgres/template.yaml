apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: postgres-aurora
  title: Create template array filed
  description: Template teste
  tags: 
    - plataforma
spec:
  owner: sre
  type: service
  parameters:
    - title: Fill in some steps
      required:
        - name
      properties:
        # Você pode coletar dados de texto do usuário usando o tipo string. Aqui está o exemplo mais básico. Ele solicitará ao usuário um nome.
        name:
          type: string
        # Você pode solicitar ao usuário uma lista de entities de catálogo usando a opção ui:field: EntityPicker da seguinte forma:
        entity:
          type: string
          ui:field: EntityPicker
        # Owned entity picker : Alternativamente, se você quiser que o usuário selecione apenas as entidades que já possuem, você pode querer usar o OwnedEntityPicker.
        #ownedEntity:
        #  type: string
        #  ui:field: OwnedEntityPicker
        # Entity name picker : Se você quiser um pouco de validação quando o usuário inserir um nome de Entidade, poderá usar o EntityNamePicker. Isso impedirá que o usuário insira um nome de entidade que não seja um nome de entidade aceitável.
        ownedEntity:
          type: string
          ui:field: EntityNamePicker
        # Repository picker
        # O seletor de repositório pode permitir que o usuário selecione o nome e o local de um novo repositório. O seletor restringe o local de destino do repositório para tornar um pouco mais fácil para o usuário selecionar um local de destino.
        repoUrl:
          type: string
          ui:field: RepoUrlPicker
          ui:options:
            allowedHosts:
              - github.com
            allowedOwners:
              - AcmeInc 
        # The RepoUrlPicker uses the allowedHosts to decide how to build the repo url output value. If you use bitbucket.org it will output a valid repo url for Bitbucket.
        # repoUrl:
        #  type: string
        #  ui:field: RepoUrlPicker
        #  ui:options:
        #    allowedHosts:
        #      - bitbucket.org
        # Owner picker : O seletor de proprietário permite que o usuário selecione um usuário/grupo no catálogo do Backstage. por exemplo
        owner:
          type: string
          ui:field: OwnerPicker
        kubernetes_cluster:
          title: Name Kubernetes Cluster
          type: string
          description: Name of the cluster kubernetes
          enum: 
            - "stg-01"
            - "stg-03"
            - "stg-02"
        namespace:
          title: Namespace
          type: string
          description: Name of the namespace in Kubernetes Cluster
          #ui:field: EntityNamePicker
          #ui:autofocus: true
        postgres_cluster:
          title: Postgres Cluster Name
          type: string
          description: Unique name of the new Postgres Cluster
          #ui:field: EntityNamePicker
          #ui:autofocus: true
        
    - title: Choose a location
      required:
        - repoUrl
      properties:
        repoUrl:
          title: Repository Location
          type: string
          ui:field: RepoUrlPicker
          ui:options:
            allowedHosts:
              - github.com

  steps:
    - id: fetch-base
      name: Fetch Base
      action: fetch:template
      input:
        url: ./template
        values:
          name: ${{parameters.name}}
    - id: fetch-docs
      name: Fetch Docs
      action: fetch:plain
      input:
        targetPath: ./community
        url: https://github.com/backstage/community/tree/main/backstage-community-sessions

    - id: publish
      name: Publish
      action: publish:github:pull-request
      input:
        repoUrl: ${{ parameters.repoUrl }}
        title: "Create new project: ${{parameters.name}}"
        branchName: create-${{parameters.name}}
        description: |
          # New project: ${{parameters.name}}

          ${{ parameters.description if parameters.description }}
        targetPath: ${{ parameters.targetPath if parameters.targetPath else parameters.name }}

  output:
    links:
      - url: ${{steps.publish.output.remoteUrl}}
        text: "Go to PR"