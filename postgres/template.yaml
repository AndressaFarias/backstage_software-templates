apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: postgres-aurora
  title: Create template array filed
  description: Template teste
  tags: 
    - plataforma
spec:
  owner: sre
  type: service
  parameters:
    - title: Fill in some steps
      required:
        - name
      properties:
        # Você pode coletar dados de texto do usuário usando o tipo string. Aqui está o exemplo mais básico. Ele solicitará ao usuário um nome.
        name:
          type: string
        # Você pode solicitar ao usuário uma lista de entities de catálogo usando a opção ui:field: EntityPicker da seguinte forma:
        entity:
          type: string
          ui:field: EntityPicker
        # Owned entity picker : Alternativamente, se você quiser que o usuário selecione apenas as entidades que já possuem, você pode querer usar o OwnedEntityPicker.
        #ownedEntity:
        #  type: string
        #  ui:field: OwnedEntityPicker
        # Entity name picker : Se você quiser um pouco de validação quando o usuário inserir um nome de Entidade, poderá usar o EntityNamePicker. Isso impedirá que o usuário insira um nome de entidade que não seja um nome de entidade aceitável.
        ownedEntity:
          type: string
          ui:field: EntityNamePicker
        # Repository picker
        # O seletor de repositório pode permitir que o usuário selecione o nome e o local de um novo repositório. O seletor restringe o local de destino do repositório para tornar um pouco mais fácil para o usuário selecionar um local de destino.
        repoUrl:
          type: string
          ui:field: RepoUrlPicker
          ui:options:
            allowedHosts:
              - github.com
            allowedOwners:
              - AcmeInc 
        # The RepoUrlPicker uses the allowedHosts to decide how to build the repo url output value. If you use bitbucket.org it will output a valid repo url for Bitbucket.
        # repoUrl:
        #  type: string
        #  ui:field: RepoUrlPicker
        #  ui:options:
        #    allowedHosts:
        #      - bitbucket.org
        # Owner picker : O seletor de proprietário permite que o usuário selecione um usuário/grupo no catálogo do Backstage. por exemplo
        owner:
          title: grupo proprietarioa
          type: string
          ui:field: OwnerPicker
        kubernetes_cluster:
          title: Name Kubernetes Cluster
          type: string
          description: Name of the cluster kubernetes
          enum: 
            - "stg-01"
            - "stg-03"
            - "stg-02"
        namespace:
          title: Namespace
          type: string
          description: Name of the namespace in Kubernetes Cluster
          #ui:field: EntityNamePicker
          #ui:autofocus: true
        postgres_cluster:
          title: Postgres Cluster Name
          type: string
          description: Unique name of the new Postgres Cluster
          #ui:field: EntityNamePicker
          #ui:autofocus: true
        
        title: Custom array of strings
        type: array
        items:
          type: object
          properties:
            name:
              type: string
            namespace:
              type: string
            role:
              type: string
              oneOf:
              - title: read-only
                const: read-only
              - title: read-write
                const: read-write
              - title: migration
                const: migration
        
        custom:
          title: custom
          type: string
          description: Custom field from external API

          # Use `SelectFieldFromApi` to configure the select field for the entry.
          ui:field: SelectFieldFromApi

          ui:options:
            # The Path on the Backstage API and the parameters to fetch the data for the dropdown
            path: 'catalog/entity-facets'
            params:
              facet: 'kind'
        
            # This selects the array element from the API fetch response. It finds the array with the name kind
            # under the facets object
            arraySelector: 'facets.kind'
        
            # (Optional) This selects the field in the array to use for the value of each select item. If its not specified
            # it will use the value of the item directly.
            valueSelector: 'count'
            # (Optional) This selects the field in the array to use for the label of each select item.
            labelSelector: 'value'

        # You can allow the user to enter a number using the `number` type:
        size:
          title: tamanho
          type: number


        # object
        # O objeto permite a coleta de tipos de dados mais complexos do usuário. 
        # Contém a opção de `properties`para adicionar variáveis ​​ao objeto da seguinte forma:
        person:
          type: object
          properties:
            name:
              title: NOME COMPLETO
              type: string
            age:
              title: IDADE
              type: number

        # array
        # Você pode solicitar um array de propriedades usando a opção de array.
        # A opção de `items` pode ser de qualquer tipo: array, object, string ou number como você quiser.
        languages:
          type: array
          items:
            type: string




    - title: Choose a location
      required:
        - repoUrl
      properties:
        repoUrl:
          title: Repository Location
          type: string
          ui:field: RepoUrlPicker
          ui:options:
            allowedHosts:
              - github.com

  steps:
    - id: fetch-base
      name: Fetch Base
      action: fetch:template
      input:
        url: ./template
        values:
          name: ${{parameters.name}}
    - id: fetch-docs
      name: Fetch Docs
      action: fetch:plain
      input:
        targetPath: ./community
        url: https://github.com/backstage/community/tree/main/backstage-community-sessions

    - id: publish
      name: Publish
      action: publish:github:pull-request
      input:
        repoUrl: ${{ parameters.repoUrl }}
        title: "Create new project: ${{parameters.name}}"
        branchName: create-${{parameters.name}}
        description: |
          # New project: ${{parameters.name}}

          ${{ parameters.description if parameters.description }}
        targetPath: ${{ parameters.targetPath if parameters.targetPath else parameters.name }}

  output:
    links:
      - url: ${{steps.publish.output.remoteUrl}}
        text: "Go to PR"